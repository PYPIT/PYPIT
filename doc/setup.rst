.. highlight:: rest

******
Setups
******

.. index:: Setups

Overview
========

PypeIt distinguishes between various configurations
for a given instrument when processing calibrations,
generating Master frames, and performing the data
reduction.  This Table summarizes the parameters that
may specify a unique setup.  The actual items used
are set by the configuration_keys() method in each
spectrograph.

========= ========= ====== ======== =======================================
Element   Attribute  Type   Example    Description
========= ========= ====== ======== =======================================
detector  binning   str    2,2      On-chip binning of the detector
 ..       det       int    1        Index of the detector; starts at 1
 ..       naxis0    int    2048     x dimension of the image
 ..       naxis1    int    2048     y dimension of the image
dichroic  ...       str    560      Dichroic name
disperser angle     float  23.4     Number specifying tilt of the grating
 ..       name      str    600/4000 Name of the dispersing element
slit      decker    str    long_1.0 Name of decker or slit mask
 ..       slitlen   float  120.     Number describing slit length
 ..       slitwid   float  1.       Number describing slit width
========= ========= ====== ======== =======================================

Each setup is given a unique setup ID value which is a
capitol letter, e.g. A.

If you tend to observe with one instrument configuration
and with a simple set of calibrations, then setup should
be straightforward.  If you use multiple configurations
(e.g. gratings, grating tilts), then one must pay more
careful attention to the setups.

Internals
=========

PypeItSetup
-----------

The PypeItSetup class organizes and runs PypeIt setup, guided
by the loaded settings.   The
`PypeItSetup.ipynb <https://github.com/pypeit/pypeit/blob/master/doc/nb/PypeItSetup.ipynb>`_
Notebook provides some usage examples, although the class is intended
to be used only internally.


fitstbl
-------

An astropy Table holds key information parsed
from the FITS headers and a small set of additional
other meta data (e.g. filename).

After file classification, it holds a set of boolean
columns that specify if the frame is an arc, bias, etc.

Lastly, after matching calibrations to the science frames,
the sci_ID column has base-2 flags specifying the science
frames and the calibrations linked to it.

setup_dict
----------

See :ref:`internal_setup_dict` for a definition of the
object used interally.

.. _pypeit_setup:

pypeit_setup
============

PypeIt includes a script that one may execute (*highly recommended*)
to initiate the data reduction process.  This script helps organize
the primary data reduction process that follows.  It also
generates a .setups file describing the various setups found
amongst the files parsed.

**Important**: To identify a setup, the code must recognize at
least one science frame in a given configuration and an associated arc.
You may need to specify the frametype of a given file if the code
is failing to automatically recognize your science or arc frames.

Execution
---------

The setup script requires two inputs: the root of the data files and the
instrument name.  Importantly, the file root must contain the full path.
Trailing letters are treated as the common root name of all the `fits`
files; to search a full directory for fits files, regardless of their
root name, the provided path *must* have a trailing `/` character.  As
always, to get help with a PypeIt script, use the `-h` option.  Here is
an example::

    pypeit_setup -r /Users/xavier/Keck/LRIS/data/2016apr06/Raw/LB -s keck_lris_blue

The code will search for all `*.fits` and `*.fits.gz` files with the
provided root.  Generally, the provided path should **not** contain a
wild-card; however, you can search through multiple directories as
follows::

    pypeit_setup -r "/Users/xavier/Keck/LRIS/data/2016apr06/Raw/*/LB" -s keck_lris_blue

If you wish to specify pairs (or groups) of files to use for background
subtraction (e.g. A-B), then include the `-b` option.

Output without --custom
=======================

When `pypeit_setup` is run without `--cfg_split` (Step 2 of the
:doc:`cookbook`), the script generates several outputs in a folder named
*setup_files*.  Here is a brief description of these.

.. _setups-file:

Setups File
-----------

One of the files generated by pypeit_setup
is a .setups file, e.g. keck_lris_blue_2016-Nov-18.setups.  This file describes
all of the instrument configurations that were parsed by the
code from the input raw files.  It is a YAML file and each
top-level key indicates a setup value, e.g. 'A'.
Note that PypeIt generates a unique setup for every detector in the
instrument.

The remainder of the information in the .setup file describes
the instrument configuration.

**Important:**  There can be only one .setup file in a working
PypeIt reduction folder for each instrument being reduced.

Here is sample output for the LRISb instrument::

     A:
      --:
        dichroic: '560'
        disperser: {angle: None, name: 600/4000}
        slit: {decker: long_1.0, slitlen: None, slitwid: None}
      '01': {binning: '2,2', det: 1, namp: 2}
      '02': {binning: '2,2', det: 2, namp: 2}
     B:
      --:
        dichroic: '560'
        disperser: {angle: None, name: 600/4000}
        slit: {decker: npc05.fi, slitlen: None, slitwid: None}
      '01': {binning: '2,2', det: 1, namp: 2}
      '02': {binning: '2,2', det: 2, namp: 2}

PypeIt file
-----------

A .pypeit file is included but should be ignored at this stage.
Only the ones generated with --custom are valuable to you.

Data Listings
-------------

The .lst file describes the input raw files,
line by line.
Data pulled from the header are shown here.  In addition, the
frametype assigned by PypeIt is specified.  If any of these are
mis-specified (possible), they should be correctly specified
at a later step.

None of these files are intended to be modified by the
user.

.. _sorted-file:

Sorted File
-----------

This file is perhaps the most useful for inspecting the setups and
individual files.  Files are sorted by instrument configuration (setup)
and then by frametype.

Here is some sample output::

    ##########################################################
    Setup A
    --:
      dichroic: '560'
      disperser: {angle: None, name: 600/4000}
      slit: {decker: long_1.0, slitlen: None, slitwid: None}
    '01': {binning: '2,2', det: 1, namp: 2}
    '02': {binning: '2,2', det: 2, namp: 2}
    #---------------------------------------------------------
    |               filename |                date |   frameno |  frametype |         target | exptime | dispname |   decker |
    | LB.20160406.11620.fits | 2016-04-06T03:13:44 |      1001 |        arc |        unknown |       1 | 600/4000 | long_1.0 |
    | LB.20160406.11483.fits | 2016-04-06T03:11:26 |      1002 |        arc |        unknown |       1 | 600/4000 | long_1.0 |
    | LB.20160406.35081.fits | 2016-04-06T10:14:44 |      1003 |    science |     J1201+2117 |    1800 | 600/4000 | long_1.0 |
    ##end


Output with --cfg_split
=======================

When pypeit_setup is run with `--cfg_split` (Step 4 of the :doc:`cookbook`),
the script generates one PypeIt file per
setup.  Each of these is placed in its own folder, one per setup.
See :doc:`pypeit_file` for a greater description of editing
the PypeIt files.


